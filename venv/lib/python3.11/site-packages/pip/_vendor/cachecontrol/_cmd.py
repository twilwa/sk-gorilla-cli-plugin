# SPDX-FileCopyrightText: 2015 Eric Larson
#
# SPDX-License-Identifier: Apache-2.0
<<<<<<< HEAD
from __future__ import annotations

import logging
from argparse import ArgumentParser
from typing import TYPE_CHECKING
=======

import logging
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce

from pip._vendor import requests

from pip._vendor.cachecontrol.adapter import CacheControlAdapter
from pip._vendor.cachecontrol.cache import DictCache
from pip._vendor.cachecontrol.controller import logger

<<<<<<< HEAD
if TYPE_CHECKING:
    from argparse import Namespace

    from pip._vendor.cachecontrol.controller import CacheController


def setup_logging() -> None:
=======
from argparse import ArgumentParser


def setup_logging():
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler()
    logger.addHandler(handler)


<<<<<<< HEAD
def get_session() -> requests.Session:
=======
def get_session():
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce
    adapter = CacheControlAdapter(
        DictCache(), cache_etags=True, serializer=None, heuristic=None
    )
    sess = requests.Session()
    sess.mount("http://", adapter)
    sess.mount("https://", adapter)

<<<<<<< HEAD
    sess.cache_controller = adapter.controller  # type: ignore[attr-defined]
    return sess


def get_args() -> Namespace:
=======
    sess.cache_controller = adapter.controller
    return sess


def get_args():
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce
    parser = ArgumentParser()
    parser.add_argument("url", help="The URL to try and cache")
    return parser.parse_args()


<<<<<<< HEAD
def main() -> None:
=======
def main(args=None):
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce
    args = get_args()
    sess = get_session()

    # Make a request to get a response
    resp = sess.get(args.url)

    # Turn on logging
    setup_logging()

    # try setting the cache
<<<<<<< HEAD
    cache_controller: CacheController = (
        sess.cache_controller  # type: ignore[attr-defined]
    )
    cache_controller.cache_response(resp.request, resp.raw)

    # Now try to get it
    if cache_controller.cached_request(resp.request):
=======
    sess.cache_controller.cache_response(resp.request, resp.raw)

    # Now try to get it
    if sess.cache_controller.cached_request(resp.request):
>>>>>>> ce8949795d50fbb9d7e2697166d634975f16afce
        print("Cached!")
    else:
        print("Not cached :(")


if __name__ == "__main__":
    main()
